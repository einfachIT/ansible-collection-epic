---

- name: Install needed software
  ansible.builtin.apt:
    name:
      - avahi-utils
      # - unison
      - inotify-tools
      - ocaml-nox
      - build-essential
    update_cache: true
    state: present
  become: true

- name: Download unison source code
  ansible.builtin.unarchive:
    src: https://github.com/bcpierce00/unison/archive/refs/tags/v{{ net_sync_unison_version }}.tar.gz
    dest: /tmp
    remote_src: true

# - name: Prepare build script
#   ansible.builtin.replace:
#     path: /tmp/unison-{{ net_sync_unison_version }}/src/fsmonitor/linux/inotify_stubs.c"
#     regex: 'GLIBC_SUPPORT_INOTIFY 0'
#     replace: 'GLIBC_SUPPORT_INOTIFY 1'

- name: Check for unison binary
  ansible.builtin.stat:
    path: "/tmp/unison-{{ net_sync_unison_version }}/src/unison"
  register: unison_binary

- name: Compile unison
  community.general.make:
    chdir: "/tmp/unison-{{ net_sync_unison_version }}/"
    params:
      UISTYLE: text
  when: not unison_binary.stat.exists


- name: Install unison
  ansible.builtin.copy:
    src: "/tmp/unison-{{ net_sync_unison_version }}/src/{{ item }}"
    dest: "/usr/bin"
    mode: "0777"
    remote_src: true
  loop:
    - unison
    - unison-fsmonitor

- name: Copy autostart script
  ansible.builtin.copy:
    src: "sync.desktop"
    dest: "/home/pi/.config/autostart/"
    owner: "{{ installation_os_user }}"
    group: "{{ installation_os_group }}"
    mode: '0644'
  when: net_sync_home_autosync

- name: Copy unison sync profile
  ansible.builtin.template:
    src: "home_sync.prf"
    dest: "/home/{{ installation_os_user }}/.unison/"
    owner: "{{ installation_os_user }}"
    group: "{{ installation_os_group }}"
    mode: '0644'
  when: net_sync_home_autosync
